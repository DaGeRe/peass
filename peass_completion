#!/usr/bin/env bash
#
# ./peass Bash Completion
# =======================
#
# Bash completion support for the `./peass` command,
# generated by [picocli](http://picocli.info/) version 4.6.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `./peass [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# './peass (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_./peass finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_./peass() {
  local cmds0=(select)
  local cmds1=(measure)
  local cmds2=(getchanges)
  local cmds3=(readproperties)
  local cmds4=(clean)
  local cmds5=(ischange)
  local cmds6=(searchcause)
  local cmds7=(createScript)
  local cmds8=(visualizerca)
  local cmds9=(continuousExecution)
  local cmds10=(findmissing)

  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_./peass_findmissing; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_./peass_continuousExecution; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_./peass_visualizerca; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_./peass_createScript; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_./peass_searchcause; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_./peass_ischange; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_./peass_clean; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_./peass_readproperties; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_./peass_getchanges; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_./peass_measure; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_./peass_select; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_./peass; return $?;
}

# Generates completions for the options and subcommands of the `./peass` command.
function _picocli_./peass() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="select measure getchanges readproperties clean ischange searchcause createScript visualizerca continuousExecution findmissing"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `select` subcommand.
function _picocli_./peass_select() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-doNotUpdateDependencies --doNotUpdateDependencies -doNotGenerateViews --doNotGenerateViews"
  local arg_opts="-folder --folder -out --out -timeout --timeout -threads --threads -startversion --startversion -endversion --endversion -testGoal --testGoal -includes --includes -pl --pl"

  compopt +o default

  case ${prev_word} in
    -folder|--folder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -out|--out)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -timeout|--timeout)
      return
      ;;
    -threads|--threads)
      return
      ;;
    -startversion|--startversion)
      return
      ;;
    -endversion|--endversion)
      return
      ;;
    -testGoal|--testGoal)
      return
      ;;
    -includes|--includes)
      return
      ;;
    -pl|--pl)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `measure` subcommand.
function _picocli_./peass_measure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-useKieker --useKieker -usekieker --usekieker -useGC --useGC -earlyStop --earlyStop -removeSnapshots --removeSnapshots -saveKieker --saveKieker"
  local arg_opts="-timeout --timeout -includes --includes -excludes --excludes -version --version -versionOld --versionOld -startversion --startversion -endversion --endversion -testGoal --testGoal -pl --pl -folder --folder -threads --threads -dependencyfile --dependencyfile -executionfile --executionfile -vms --vms -duration --duration -warmup --warmup -iterations --iterations -repetitions --repetitions -record --record -measurementStrategy --measurementStrategy -outlierFactor --outlierFactor -type1error --type1error -type2error --type2error -statisticTest --statisticTest -test --test"
  local record_option_args="OPERATIONEXECUTION REDUCED_OPERATIONEXECUTION" # --record values
  local measurementStrategy_option_args="SEQUENTIAL PARALLEL" # --measurementStrategy values
  local statisticTest_option_args="T_TEST BIMODAL_T_TEST AGNOSTIC_T_TEST MANN_WHITNEY_TEST CONFIDENCE_INTERVAL ANY ANY_NO_AGNOSTIC" # --statisticTest values

  compopt +o default

  case ${prev_word} in
    -timeout|--timeout)
      return
      ;;
    -includes|--includes)
      return
      ;;
    -excludes|--excludes)
      return
      ;;
    -version|--version)
      return
      ;;
    -versionOld|--versionOld)
      return
      ;;
    -startversion|--startversion)
      return
      ;;
    -endversion|--endversion)
      return
      ;;
    -testGoal|--testGoal)
      return
      ;;
    -pl|--pl)
      return
      ;;
    -folder|--folder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -threads|--threads)
      return
      ;;
    -dependencyfile|--dependencyfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -executionfile|--executionfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -vms|--vms)
      return
      ;;
    -duration|--duration)
      return
      ;;
    -warmup|--warmup)
      return
      ;;
    -iterations|--iterations)
      return
      ;;
    -repetitions|--repetitions)
      return
      ;;
    -record|--record)
      COMPREPLY=( $( compgen -W "${record_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -measurementStrategy|--measurementStrategy)
      COMPREPLY=( $( compgen -W "${measurementStrategy_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -outlierFactor|--outlierFactor)
      return
      ;;
    -type1error|--type1error)
      return
      ;;
    -type2error|--type2error)
      return
      ;;
    -statisticTest|--statisticTest)
      COMPREPLY=( $( compgen -W "${statisticTest_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -test|--test)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `getchanges` subcommand.
function _picocli_./peass_getchanges() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-dependencyfile --dependencyfile -executionfile --executionfile -data --data -out --out -type1error --type1error -type2error --type2error"

  compopt +o default

  case ${prev_word} in
    -dependencyfile|--dependencyfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -executionfile|--executionfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -data|--data)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -out|--out)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -type1error|--type1error)
      return
      ;;
    -type2error|--type2error)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `readproperties` subcommand.
function _picocli_./peass_readproperties() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="-dependencyfile --dependencyfile -executionfile --executionfile -folder --folder -out --out"

  compopt +o default

  case ${prev_word} in
    -dependencyfile|--dependencyfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -executionfile|--executionfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -folder|--folder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -out|--out)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clean` subcommand.
function _picocli_./peass_clean() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-url --url -dependencyfile --dependencyfile -data --data -out --out"

  compopt +o default

  case ${prev_word} in
    -url|--url)
      return
      ;;
    -dependencyfile|--dependencyfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -data|--data)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -out|--out)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ischange` subcommand.
function _picocli_./peass_ischange() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts=""
  local arg_opts="-data --data -type1error --type1error -type2error --type2error"

  compopt +o default

  case ${prev_word} in
    -data|--data)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -type1error|--type1error)
      return
      ;;
    -type2error|--type2error)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `searchcause` subcommand.
function _picocli_./peass_searchcause() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-useKieker --useKieker -usekieker --usekieker -useGC --useGC -earlyStop --earlyStop -removeSnapshots --removeSnapshots -saveKieker --saveKieker -useCalibrationRun --useCalibrationRun -useNonAggregatedWriter --useNonAggregatedWriter -useEOIs --useEOIs -notSplitAggregated --notSplitAggregated -useSourceInstrumentation --useSourceInstrumentation -useCircularQueue --useCircularQueue -notUseSelectiveInstrumentation --notUseSelectiveInstrumentation -useSampling --useSampling"
  local arg_opts="-timeout --timeout -includes --includes -excludes --excludes -version --version -versionOld --versionOld -startversion --startversion -endversion --endversion -testGoal --testGoal -pl --pl -folder --folder -threads --threads -dependencyfile --dependencyfile -executionfile --executionfile -vms --vms -duration --duration -warmup --warmup -iterations --iterations -repetitions --repetitions -record --record -measurementStrategy --measurementStrategy -outlierFactor --outlierFactor -type1error --type1error -type2error --type2error -statisticTest --statisticTest -test --test -propertyFolder --propertyFolder -minTime --minTime -rcaStrategy --rcaStrategy -writeInterval --writeInterval"
  local record_option_args="OPERATIONEXECUTION REDUCED_OPERATIONEXECUTION" # --record values
  local measurementStrategy_option_args="SEQUENTIAL PARALLEL" # --measurementStrategy values
  local statisticTest_option_args="T_TEST BIMODAL_T_TEST AGNOSTIC_T_TEST MANN_WHITNEY_TEST CONFIDENCE_INTERVAL ANY ANY_NO_AGNOSTIC" # --statisticTest values
  local strategy_option_args="LEVELWISE CONSTANT_LEVELS COMPLETE UNTIL_STRUCTURE_CHANGE UNTIL_SOURCE_CHANGE" # --rcaStrategy values

  compopt +o default

  case ${prev_word} in
    -timeout|--timeout)
      return
      ;;
    -includes|--includes)
      return
      ;;
    -excludes|--excludes)
      return
      ;;
    -version|--version)
      return
      ;;
    -versionOld|--versionOld)
      return
      ;;
    -startversion|--startversion)
      return
      ;;
    -endversion|--endversion)
      return
      ;;
    -testGoal|--testGoal)
      return
      ;;
    -pl|--pl)
      return
      ;;
    -folder|--folder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -threads|--threads)
      return
      ;;
    -dependencyfile|--dependencyfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -executionfile|--executionfile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -vms|--vms)
      return
      ;;
    -duration|--duration)
      return
      ;;
    -warmup|--warmup)
      return
      ;;
    -iterations|--iterations)
      return
      ;;
    -repetitions|--repetitions)
      return
      ;;
    -record|--record)
      COMPREPLY=( $( compgen -W "${record_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -measurementStrategy|--measurementStrategy)
      COMPREPLY=( $( compgen -W "${measurementStrategy_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -outlierFactor|--outlierFactor)
      return
      ;;
    -type1error|--type1error)
      return
      ;;
    -type2error|--type2error)
      return
      ;;
    -statisticTest|--statisticTest)
      COMPREPLY=( $( compgen -W "${statisticTest_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -test|--test)
      return
      ;;
    -propertyFolder|--propertyFolder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -minTime|--minTime)
      return
      ;;
    -rcaStrategy|--rcaStrategy)
      COMPREPLY=( $( compgen -W "${strategy_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -writeInterval|--writeInterval)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `createScript` subcommand.
function _picocli_./peass_createScript() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-useSlurm --useSlurm"
  local arg_opts="-experimentId --experimentId -dependencyfile --dependencyfile -dependencyFile --dependencyFile -executionfile --executionfile -executionFile --executionFile"

  compopt +o default

  case ${prev_word} in
    -experimentId|--experimentId)
      return
      ;;
    -dependencyfile|--dependencyfile|-dependencyFile|--dependencyFile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -executionfile|--executionfile|-executionFile|--executionFile)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `visualizerca` subcommand.
function _picocli_./peass_visualizerca() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-visualizeFull --visualizeFull"
  local arg_opts="-data --data -propertyFolder --propertyFolder -out --out"

  compopt +o default

  case ${prev_word} in
    -data|--data)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -propertyFolder|--propertyFolder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -out|--out)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `continuousExecution` subcommand.
function _picocli_./peass_continuousExecution() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-useKieker --useKieker -usekieker --usekieker -useGC --useGC -earlyStop --earlyStop -removeSnapshots --removeSnapshots -saveKieker --saveKieker"
  local arg_opts="-timeout --timeout -includes --includes -excludes --excludes -version --version -versionOld --versionOld -startversion --startversion -endversion --endversion -testGoal --testGoal -pl --pl -vms --vms -duration --duration -warmup --warmup -iterations --iterations -repetitions --repetitions -record --record -measurementStrategy --measurementStrategy -outlierFactor --outlierFactor -type1error --type1error -type2error --type2error -statisticTest --statisticTest -threads --threads -test --test -properties --properties -folder --folder"
  local record_option_args="OPERATIONEXECUTION REDUCED_OPERATIONEXECUTION" # --record values
  local measurementStrategy_option_args="SEQUENTIAL PARALLEL" # --measurementStrategy values
  local statisticTest_option_args="T_TEST BIMODAL_T_TEST AGNOSTIC_T_TEST MANN_WHITNEY_TEST CONFIDENCE_INTERVAL ANY ANY_NO_AGNOSTIC" # --statisticTest values

  compopt +o default

  case ${prev_word} in
    -timeout|--timeout)
      return
      ;;
    -includes|--includes)
      return
      ;;
    -excludes|--excludes)
      return
      ;;
    -version|--version)
      return
      ;;
    -versionOld|--versionOld)
      return
      ;;
    -startversion|--startversion)
      return
      ;;
    -endversion|--endversion)
      return
      ;;
    -testGoal|--testGoal)
      return
      ;;
    -pl|--pl)
      return
      ;;
    -vms|--vms)
      return
      ;;
    -duration|--duration)
      return
      ;;
    -warmup|--warmup)
      return
      ;;
    -iterations|--iterations)
      return
      ;;
    -repetitions|--repetitions)
      return
      ;;
    -record|--record)
      COMPREPLY=( $( compgen -W "${record_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -measurementStrategy|--measurementStrategy)
      COMPREPLY=( $( compgen -W "${measurementStrategy_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -outlierFactor|--outlierFactor)
      return
      ;;
    -type1error|--type1error)
      return
      ;;
    -type2error|--type2error)
      return
      ;;
    -statisticTest|--statisticTest)
      COMPREPLY=( $( compgen -W "${statisticTest_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -threads|--threads)
      return
      ;;
    -test|--test)
      return
      ;;
    -properties|--properties)
      return
      ;;
    -folder|--folder)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `findmissing` subcommand.
function _picocli_./peass_findmissing() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-useslurm ---useslurm -h --help -V --version"
  local arg_opts="-data --data"

  compopt +o default

  case ${prev_word} in
    -data|--data)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `./peass`, `./peass.sh`, and `./peass.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_./peass` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_./peass -o default ./peass ./peass.sh ./peass.bash
